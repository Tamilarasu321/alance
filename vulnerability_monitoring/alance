#!/bin/bash
#while
#do
path="/home/opc/tamil/patching"
export PATH=$PATH:"$path"
export TERM=xterm
cd $path
source alance.config
source mail.config
source header.config
source header_vul.config
##############CPU Check######################
cpu_check () {
server_running_time=`echo "$top_cpu"|grep "top"|awk -F"-" '{print $2}'|awk -F"," '{print $1" "$2}'|tr -s '\n'`
server_load_average=`echo "$top_cpu"|grep "top"|awk -F"average:" '{print $2}'|sed "s/ //g"|tr -s '\n'`
server_zombie=`echo "$top_cpu"|grep "Tasks"|awk -F"zombie" '{print $1}'|awk -F"," '{print $NF}'|sed "s/ //g"`
server_user=`echo "$top_cpu"|grep "user"|awk -F"user" '{print $1}'|awk -F"," '{print $NF}'|sed "s/ //g"`
server_cpu1=`echo "$top_cpu"|grep "^%Cpu"|awk -F":" '{print $2}'|awk -F"," '{print $4}'|awk -F"id" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_cpu=$(( 100 - $server_cpu1))
server_memory_used=`echo "$top_cpu"|awk -F"Mem :" '{print $2}'|awk -F"," '{print $3}'|awk -F"used" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_memory_total=`echo "$top_cpu"|awk -F"Mem :" '{print $2}'|awk -F"," '{print $1}'|awk -F"total" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_memory=$(( 100 * $server_memory_used / $server_memory_total))
server_swap_used=`echo "$top_cpu"|awk -F"Swap:" '{print $2}'|awk -F"," '{print $3}'|awk -F"used" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"|tr -d '\n'`
server_swap_total=`echo "$top_cpu"|awk -F"Swap:" '{print $2}'|awk -F"," '{print $1}'|awk -F"total" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"|tr -d '\n'`
if [[ "$server_swap_used" != 0 ]]; then
server_swap=$(( 100 * $server_swap_used / $server_swap_total))
else
server_swap=0
fi
}
##################Server Parameters###########
d_date=`date "+%Y%m%d"`
bad_date=`cat $path/alance.license|grep -w "Bad Word"|awk -F'"' '{print $2}'|sed "s/-//g"`
if [ "$d_date" -gt "$bad_date" ]; then
echo "License expired"
exit 1
else
echo "<tr><td><b>Last Updated</b></td><td>" `date '+%d-%m-%Y %H:%M:%S'`"</td></tr>" >> $path/output.html
echo "<tr><td><b>Hostname</b></td><td>" `hostname` "</td></tr>" >> $path/output.html
echo "<tr><td><b>IP Address</b></td><td>" `hostname -I` "</td></tr>" >> $path/output.html
echo "<tr><td><b>Server Model</b></td><td>" `cat /etc/os-release|grep -w 'NAME'|awk -F'"' '{print $2}'` "</td></tr>" >> $path/output.html
echo "<tr><td><b>OS Version</b></td><td>" `cat /etc/os-release|grep -w 'VERSION'|awk -F'"' '{print $2}'` "</td></tr>" >> $path/output.html
echo "<tr><td><b>Server Kernel Version</b></td><td>" `uname -r` "</td></tr>" >> $path/output.html
echo "<tr><td><b>Server CPU Model Name</b></td><td>" `lscpu|grep "^Model name:"|awk -F" " '{print $3}'` "</td></tr>" >> $path/output.html
echo "<tr><td><b>Server CPU Vendor</b></td><td>" `lscpu|grep "^Vendor ID:"|awk -F" " '{print $3}'` "</td></tr>" >> $path/output.html
echo "<tr><td><b>Server CPU Count</b></td><td>" `lscpu|grep "^CPU(s):"|awk -F" " '{print $2}'` "</td></tr>" >> $path/output.html
echo '</table></div><div class="box"><h4 class="card-title">Server Checks</h4><table style="width:100%">' >> $path/output.html
################CPU Check#####################
top_cpu=`timeout 10 top -b -n 1|head -5`
if [[ -z "$top_cpu" ]]; then
top_cpu=`timeout 10 top -b -n 1|head -5`
if [[ -z "$top_cpu" ]]; then
mail_cpu
else
cpu_check
if [[ "$server_cpu" -ge 90 ]]; then
mail_cpu_critical "$server_cpu"
elif [[ "$server_cpu" -ge 80 ]]; then
mail_cpu_warning "$server_cpu"
fi
if [[ "$server_memory" -ge 90 ]]; then
mail_memory_critical "$server_memory"
elif [[ "$server_memory" -ge 80 ]]; then
mail_memory_warning "$server_memory"
fi
if [[ "$server_swap" -ge 90 ]]; then
mail_swap_critical "$server_swap"
elif [[ "$server_swap" -ge 80 ]]; then
mail_swap_warning "$server_swap"
fi
fi
else
cpu_check
if [[ "$server_cpu" -ge 90 ]]; then
mail_cpu_critical "$server_cpu"
elif [[ "$server_cpu" -ge 80 ]]; then
mail_cpu_warning "$server_cpu"
fi
if [[ "$server_memory" -ge 90 ]]; then
mail_memory_critical "$server_memory"
elif [[ "$server_memory" -ge 80 ]]; then
mail_memory_warning "$server_memory"
fi
if [[ "$server_swap" -ge 90 ]]; then
mail_swap_critical "$server_swap"
elif [[ "$server_swap" -ge 80 ]]; then
mail_swap_warning "$server_swap"
fi
fi
#################Server Parameters###########
echo "<tr><td><b>Server Hypervisor</b></td><td>" `hostnamectl|grep -w "Virtualization"|awk -F": " '{print $2}'`"</td></tr>" >> $path/output.html
echo "<tr><td><b>Server Total Memory</b></td><td>" `cat /proc/meminfo|grep -w "MemTotal:"|awk -F" " '{print $2}'|awk '{printf "%.0f\n",$1/(1024*1024)}'`"GB</td></tr>" >> $path/output.html
echo '<tr><td><b>Running Time</b></td><td>' $server_running_time "</td></tr>" >> $path/output.html
echo "<tr><td><b>Users Logged in</b></td><td>" $server_user "</td></tr>">> $path/output.html
if [[ `echo "$server_load_average"|awk -F"," '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]] || [[ `echo "$server_load_average"|awk -F"," '{print $2}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]] || [[ `echo "$server_load_average"|awk -F"," '{print $3}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]]; then
mail_load_average "$server_load_average"
echo "<tr><td><b>Load Average"'</b></td><td><button class="button" style="background-color: red;"></button>&nbsp;'"Failed" "($server_load_average)</td></tr>" >> $path/output.html
else
echo "<tr><td><b>Load Average"'</b></td><td><button class="button" style="background-color: green;"></button>&nbsp;'"OK" "($server_load_average)</td></tr>" >> $path/output.html
fi
if [[ "$server_zombie" -ge 1 ]]; then
mail_zombie "$server_zombie"
echo "<tr><td><b>Zombie Process Count"'</b></td><td><button class="button" style="background-color: red;"></button>&nbsp;'$server_zombie"</td></tr>" >> $path/output.html
else
echo "<tr><td><b>Zombie Process Count"'</b></td><td><button class="button" style="background-color: green;"></button>&nbsp;'"OK</td></tr>" >> $path/output.html
fi
############NTP Synchronization###################
server_ntp=`timedatectl|grep "synchronized"|awk -F": " '{print $2}'`
if [[ "$server_ntp" == "yes" ]]; then
echo "<tr><td><b>NTP Synchronized"'</b></td><td><button class="button" style="background-color: green;"></button>&nbsp;'"OK</td></tr></table></div></div>" >> $path/output.html
else
mail_ntp
echo "<tr><td><b>NTP Synchronized"'</b></td><td><button class="button" style="background-color: red;"></button>&nbsp;'"Failed</td></tr></table></div></div>" >> $path/output.html
fi
###############Second Container - Disk Check###########################
echo '<div id="container"><div class="box"><h4 class="card-title">Disk and Inode Utilization</h4><div style="padding:15px"><canvas id="barchart" style="width:50%;max-width:500px"></canvas><script>' >> $path/output.html

while read line
do
if  [[ -z "$line" ]]; then
while read line
do
if  [[ -z "$line" ]]; then
mail_disk
echo hi
break
else
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 90 ]]; then
mail_disk_critical `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
elif [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 80 ]]; then
mail_disk_warning `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
fi
disk_var="$disk_var"`echo $line|awk -F"," '{print $2}'`
disk_per="$disk_var"`echo $line|awk -F"," '{print $1}'|sed "s/%//g"`
fi
done < <(timeout 10 df -h|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $5","$6}')
else
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 90 ]]; then
mail_disk_critical `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
elif [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 80 ]]; then
mail_disk_warning `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
fi
disk_var="$disk_var,"`echo $line|awk -F"," '{print $2}'`
disk_per="$disk_per,"`echo $line|awk -F"," '{print $1}'|sed "s/%//g"`
fi
done < <(timeout 10 df -h|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $5","$6}')

echo "const xValues = ["`echo $disk_var|sed 's/^./"/g'|sed 's/,/","/g'`'"];' >> $path/output.html
cat >> $path/output.html << EOL
new Chart("barchart", {
  type: "bar",
  data: {
    labels: xValues,
    datasets: [{ 
      label: 'Disk(%)',
      backgroundColor: "green",
EOL
echo "data: ["`echo $disk_per|sed "s/^.//g"`"]," >> $path/output.html
cat >> $path/output.html << EOL
      borderColor: "red",
      fill: false
    }, { 
      label: 'Inode(%)',
      backgroundColor: "blue",
EOL
#############Inode Check##################
while read line
do
if  [[ -z "$line" ]]; then
while read line
do
if  [[ -z "$line" ]]; then
mail_inode
break
else
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` != "-" ]]; then
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 90 ]]; then
mail_inode_critical `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
elif [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 80 ]]; then
mail_inode_warning `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2'`
fi
fi
inode_per="$inode_per,"`echo $line|awk -F"," '{print $1}'|sed "s/%//g"|sed "s/-/0/g"`
fi
done < <(timeout 10 df -ih|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $5","$6}')
else
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` != "-" ]]; then
if [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 90 ]]; then
mail_inode_critical `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
elif [[ `echo $line|awk -F"," '{print $1}'|sed "s/%//g"` -ge 80 ]]; then
mail_inode_warning `echo $line|awk -F"," '{print $1}'` `echo $line|awk -F"," '{print $2}'`
fi
fi
inode_per="$inode_per,"`echo $line|awk -F"," '{print $1}'|sed "s/%//g"|sed "s/-/0/g"`
fi
done < <(timeout 10 df -ih|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $5","$6}')

echo "data: ["`echo $inode_per|sed "s/^.//g"`"]," >> $path/output.html
cat >> $path/output.html << EOL
      borderColor: "blue",
      fill: false
    }]
  },
    options: {
    legend: {display: true},
    scales: {
      yAxes: [{
        ticks: {
          beginAtZero: true,
		  max: 100
        }
      }],
    }
  }
});
</script></div></div>
EOL
####################Second Container & CPU#######################
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_cpu >> $path/cpu.txt
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_memory >> $path/memory.txt
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_swap >> $path/swap.txt
echo '<div class="box"><h4 class="card-title">CPU, Memory and Swap Utilization</h4><div style="padding:15px"><canvas id="linechart" style="width:50%;max-width:500px"></canvas><script>' >> $path/output.html
echo "const xcpu = ["`awk '$0>=from && $0<=to' from="$(date '+%d-%m-%Y %H' -d -1hour)" to="$(date '+%d-%m-%Y %H' -d +1hour)" cpu.txt|awk -F" " '{print $2}'|awk -F"-" '{print $1":"$2}'|tr "\n" ","|sed 's/,/","/g'|sed 's/^/"/g'|sed 's/..$//g'`"];" >> $path/output.html
cat >> $path/output.html << EOL
new Chart("linechart", {
  type: "line",
  data: {
    labels: xcpu,
    datasets: [{
	  label: 'CPU(%)',
EOL
echo "data: ["`awk '$0>=from && $0<=to' from="$(date '+%d-%m-%Y %H' -d -1hour)" to="$(date '+%d-%m-%Y %H' -d +1hour)" $path/cpu.txt|awk -F":" '{print $2}'|tr "\n" ","|sed "s/.$//g"`"]," >> $path/output.html
cat >> $path/output.html << EOL
      borderColor: "#66ccff",
      fill: false
    }, {
	  label: 'Memory(%)',
EOL
echo "data: ["`awk '$0>=from && $0<=to' from="$(date '+%d-%m-%Y %H' -d -1hour)" to="$(date '+%d-%m-%Y %H' -d +1hour)" $path/memory.txt|awk -F":" '{print $2}'|tr "\n" ","|sed "s/.$//g"`"]," >> $path/output.html
cat >> $path/output.html << EOL
	borderColor: "green",
      fill: false
    }, {
	  label: 'Swap(%)',
EOL
echo "data: ["`awk '$0>=from && $0<=to' from="$(date '+%d-%m-%Y %H' -d -1hour)" to="$(date '+%d-%m-%Y %H' -d +1hour)" $path/swap.txt|awk -F":" '{print $2}'|tr "\n" ","|sed "s/.$//g"`"]," >> $path/output.html
cat >> $path/output.html << EOL
      borderColor: "blue",
      fill: false
    }]
  },
  options: {
        responsive: true,
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true,
					max: 100,
                }
            }]
        }
    }

});
</script></div></div></div>
EOL
#############Third Container & Services Check#########################
server_total_services=`systemctl --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_running_services=`systemctl --state=running --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_failed_services=`systemctl --state=failed --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_exited_services=`systemctl --state=exited --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
if [[ "$server_failed_services" -ge 1 ]]; then
mail_services "$server_failed_services"
fi

cat >> $path/output.html << EOL
<div id="container">
        <div class="box">
                <h4 class="card-title">System Services Check</h4>
				<div style="padding:15px"><canvas id="piechart" style="width:100%;max-width:600px"></canvas>
<script>
var xser = ["Total Services", "Running Services", "Exited Services", "Failed Services"];
EOL
echo "var yser = ["$server_total_services,$server_running_services,$server_exited_services,$server_failed_services"];" >> $path/output.html
cat >> $path/output.html << EOL
var barColors = [
  "#00e699",
  "#008000",
  "#ffa500",
  "#ff0000"
];

new Chart("piechart", {
  type: "pie",
  data: {
    labels: xser,
    datasets: [{
      backgroundColor: barColors,
      data: yser
    }]
  },
  options: {
  legend: {display: true}
  }
});
</script>
</div>
</div>
        <div class="box">
                <h4 class="card-title">Critical Services Check</h4>
				<table style="width:80%">
EOL
#############Third Container & Services check##############
for service in sshd auditd firewalld rsyslog sendmail crond
do
if [[ `systemctl status $service|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo '<tr><td>'$service'</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
else
mail_service "$service"
echo '<tr><td>'$service'</td><td><button class="button" style="background-color: red;"></button>&nbsp;Failed</td></tr>' >> $path/output.html
fi
done

if [[ `systemctl status chronyd|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo '<tr><td>chronyd</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
elif [[ `systemctl status ntpd|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo '<tr><td>ntpd</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
else
mail_service "chronyd/ntpd"
echo '<tr><td>chronyd/ntpd</td><td><button class="button" style="background-color: red;"></button>&nbsp;Failed</td></tr>' >> $path/output.html
fi

if [[ `ps -ef|grep tomcat|grep -v grep|wc -l` -ge 1 ]]; then
echo '<tr><td>tomcat</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
else
mail_service "tomcat"
echo '<tr><td>tomcat</td><td><button class="button" style="background-color: red;"></button>&nbsp;Failed</td></tr>' >> $path/output.html
fi
echo "</table></div></div>" >> $path/output.html
###########Fourth Container and Top 10 processes###########
cat >> $path/output.html << EOL
	 <div id="container">
        <div class="box" style="overflow-x:auto;">
                <h4 class="card-title">Top 10 CPU Consuming Processes</h4>
			<table id="disk">
<tr><th>PID</th><th>PPID</th><th>CMD</th><th>Command</th><th>CPU(%)</th><th>Memory(%)</th></tr>
EOL
while read line
do
echo "<tr><td>"`echo $line|awk -F" " '{print $1}'`"</td><td>"`echo $line|awk -F" " '{print $2}'`"</td><td>"`echo $line|awk -F" " '{print $3}'`"</td><td>"`echo $line|awk -F" " '{print $4}'`"</td><td>"`echo $line|awk -F" " '{print $5}'`"</td><td>"`echo $line|awk -F" " '{print $6}'`"</td></tr>" >> $path/output.html
done < <(ps -eo pid,ppid,cmd,comm,%mem,%cpu --sort=-%cpu|head -10|grep -v "PPID")
cat >> $path/output.html << EOL
</table>
</div>
        <div class="box" style="overflow-x:auto;">
                <h4 class="card-title">Top 10 Memory Consuming Processes</h4>
<table id="disk">
<tr><th>PID</th><th>PPID</th><th>CMD</th><th>Command</th><th>Memory(%)</th><th>CPU(%)</th></tr>
EOL
while read line
do
echo "<tr><td>"`echo $line|awk -F" " '{print $1}'`"</td><td>"`echo $line|awk -F" " '{print $2}'`"</td><td>"`echo $line|awk -F" " '{print $3}'`"</td><td>"`echo $line|awk -F" " '{print $4}'`"</td><td>"`echo $line|awk -F" " '{print $5}'`"</td><td>"`echo $line|awk -F" " '{print $6}'`"</td></tr>" >> $path/output.html
done < <(ps -eo pid,ppid,cmd,comm,%mem,%cpu --sort=-%mem|head -10|grep -v "PPID")
echo "</table></div></div>" >> $path/output.html
#############Fifth container & Disk I/O performance######################
cat >> $path/output.html << EOL
<div id="container1">
        <div class="box1" style="overflow-x:auto;">
                <h4 class="card-title">Disk I/O performance</h4>
<table id="disk">
<tr><th>Device</th><th>tps</th><th>kB_read/s</th><th>kB_wrtn/s</th><th>kB_dscd/s</th><th>kB_read</th><th>kB_wrtn</th><th>kB_dscd</th></tr>
EOL
while read line
do
echo "<tr><td>"`echo $line|awk -F" " '{print $1}'`"</td><td>"`echo $line|awk -F" " '{print $2}'`"</td><td>"`echo $line|awk -F" " '{print $3}'`"</td><td>"`echo $line|awk -F" " '{print $4}'`"</td><td>"`echo $line|awk -F" " '{print $5}'`"</td><td>"`echo $line|awk -F" " '{print $6}'`"</td><td>"`echo $line|awk -F" " '{print $7}'`"</td><td>"`echo $line|awk -F" " '{print $8}'`"</td></tr>" >> $path/output.html
done < <(iostat -d|grep -v "Linux"|grep "."|grep -v "Device")
echo "</table></div></div>" >> $path/output.html
#########Sixth Container & Password Expiry Check for all users##############
cat >> $path/output.html << EOL
	<div id="container1">
        <div class="box1" style="overflow-x:auto; height: 100vh;">
                <h4 class="card-title">User Password Expiry Check</h4>
				<table id="disk">
<tr><th>Username</th><th>Expiry Date</th></tr>
EOL
for account in $(awk -F':' '{ print $1}' /etc/passwd)
do
expiry="$(sudo chage -l "$account" | grep 'Account expires' | awk -F": " '{print $2}')"
if [[ "$expiry" != "never" ]]
then
if [[ `echo $expiry|awk -F" " '{print $2}'|sed "s/,//g"` -lt `date '+%d'` ]] && [[ `echo $expiry|awk -F" " '{print $1}'` -eq `date '+%b'` ]] && [[ `echo $expiry|awk -F" " '{print $3}'` -eq `date '+%Y'` ]]
then
echo '<tr><td>'$account'</td><td><button class="button" style="background-color: red;"></button>&nbsp;$expiry</td></tr>' >> $path/output.html
mail_password "$account" "$expiry"
else
echo '<tr><td>'$account'</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
fi
else
echo '<tr><td>'$account'</td><td><button class="button" style="background-color: green;"></button>&nbsp;OK</td></tr>' >> $path/output.html
fi
done
cat >> $path/output.html << EOL
</table>
</div>
    </div><footer style="text-align: center;">&copy; Copyright 2023 Alance.in</footer>
	</section>
	</body>
	</html>
EOL
##############Vulnerability monitoring & First Container####################
server_security_updates=`yum updateinfo summary|grep "Security"|grep -ve "Critical" -e "Important" -e "Moderate" -e "Low"|awk -F" " '{print $1}'`
if [[ -z "$server_security_updates" ]]; then
server_security_updates=0
fi
server_critical_updates=`yum updateinfo summary|grep "Critical"|awk -F" " '{print $1}'`
if [[ -z "$server_critical_updates" ]]; then
server_critical_updates=0
fi
server_important_updates=`yum updateinfo summary|grep "Important"|awk -F" " '{print $1}'`
if [[ -z "$server_important_updates" ]]; then
server_important_updates=0
fi
server_moderate_updates=`yum updateinfo summary|grep "Moderate"|awk -F" " '{print $1}'`
if [[ -z "$server_moderate_updates" ]]; then
server_moderate_updates=0
fi
server_low_updates=`yum updateinfo summary|grep "Low"|awk -F" " '{print $1}'`
if [[ -z "$server_low_updates" ]]; then
server_low_updates=0
fi
server_bugfix_updates=`yum updateinfo summary|grep "Bugfix"|awk -F" " '{print $1}'`
if [[ -z "$server_bugfix_updates" ]]; then
server_bugfix_updates=0
fi
server_enhance_updates=`yum updateinfo summary|grep "Enhancement"|awk -F" " '{print $1}'`
if [[ -z "$server_enhance_updates" ]]; then
server_enhance_updates=0
fi
server_new_updates=`yum updateinfo summary|grep "New Package"|awk -F" " '{print $1}'`
if [[ -z "$server_new_updates" ]]; then
server_new_updates=0
fi


echo "Total Security Updates:$server_security_updates" >> $path/output.txt
echo "Critical Security Updates:$server_critical_updates" >> $path/output.txt
echo "Important Security Updates:$server_important_updates" >> $path/output.txt
echo "Moderate Security Updates:$server_moderate_updates" >> $path/output.txt
echo "Low Security Updates:$server_low_updates" >> $path/output.txt
echo "Bugfix Updates:$server_bugfix_updates" >> $path/output.txt
echo "Enhancement Updates:$server_enhance_updates" >> $path/output.txt
echo "New Package Updates:$server_new_updates" >> $path/output.txt

		 
echo '<div id="container2"><div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Total Security Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_security_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Critical Security Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_critical_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Important Security Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_important_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Moderate Security Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_moderate_updates'</h4></div></div>' >> $path/output1.html
#########Second container ##############
echo '<div id="container2"><div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Low Security Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_low_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Bugfix Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_bugfix_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">Enhancement Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_enhance_updates'</h4></div>' >> $path/output1.html
echo '<div class="box2" style="overflow-x:auto;"><h4 class="card-title1">New Package Updates</h4><h4 class="card-title1"style="text-align:center;">'$server_new_updates'</h4></div></div>' >> $path/output1.html
########Third Container#####################
echo '<div id="container1"><div class="box" style="overflow-x:auto;"><h4 class="card-title">Packages List</h4><table id="disk">' >> $path/output1.html
echo '<tr><th>Category</th><th>Severity</th><th>Package name</th></tr>' >> $path/output1.html
while read line
do
echo '<tr><td>'`echo $line|awk -F"," '{print $1}'`'</td><td>'`echo $line|awk -F"," '{print $2}'`'</td><td>'`echo $line|awk -F"," '{print $3}'`'</td></tr>' >> $path/output1.html
done < <(yum updateinfo list|grep -v "Last metadata expiration check:"|awk -F" " '{print $1","$2","$3}')
echo '</table></div></div><footer style="text-align: center;">&copy; Copyright 2023 Alance.in</footer></section></body></html>' >> $path/output1.html
cp $path/output.html index.html
cp $path/output1.html Vulnerability.html
sleep 10
fi
#done
