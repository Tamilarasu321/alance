#!/bin/bash
#while true
#do
#path="/home/opc/tamil/server_monitoring"
path="/home/opc/tamil/patching"
export PATH=$PATH:"$path"
export TERM=xterm
cd $path
source alance.config
###########Mail Format#######################
mail_cpu () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: Top command not working

Hi Team,<br /><br />

Top command to check cpu status is not working, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_disk () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: df command not working

Hi Team,<br /><br />

df command to check FS status is not working, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_disk_warning () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: WARNING: Disk utilisation reached $1 in $2

Hi Team,<br /><br />

Disk utilisation reached $1 in $2 FS, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_disk_critical () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Disk utilisation reached $1 in $2

Hi Team,<br /><br />

Disk utilisation reached $1 in $2 FS, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_inode () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: inode command not working

Hi Team,<br /><br />

Inode command to check inode status is not working, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_inode_warning () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: WARNING: Inode utilisation reached $1 in $2

Hi Team,<br /><br />

Inode utilisation reached $1 in $2 FS, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_inode_critical () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Inode utilisation reached $1 in $2

Hi Team,<br /><br />

Inode utilisation reached $1 in $2 FS, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_cpu_warning () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: WARNING: CPU utilisation reached threshold: $1%

Hi Team,<br /><br />

CPU utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_cpu_critical () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: CPU utilisation reached threshold: $1%

Hi Team,<br /><br />

CPU utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_memory_warning () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: WARNING: Memory utilisation reached threshold: $1%

Hi Team,<br /><br />

Memory utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_memory_critical () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Memory utilisation reached threshold: $1%

Hi Team,<br /><br />

Memory utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_swap_warning () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: WARNING: Swap Memory utilisation reached threshold: $1%

Hi Team,<br /><br />

Swap Memory utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_swap_critical () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Swap Memory utilisation reached threshold: $1%

Hi Team,<br /><br />

Swap Memory utilisation reached threshold $1%, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_zombie () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Zombie process is running: $1

Hi Team,<br /><br />

Zombie process is running,please check.<br />
Zombie process count: $1<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_load_average () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Server load reached threshold: $1

Hi Team,<br /><br />

Server load reached threshold, please check.<br />
Load average: $1<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_services () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: Services got failed: $1

Hi Team,<br /><br />

System services got failed, please check.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_password () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: Password expired for user $1 on $2

Hi Team,<br /><br />

Password expired for user $1 on $2, please reset new password.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_service () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: $1 service not running

Hi Team,<br /><br />

$1 service not running, please restart the service.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_ntp () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: NTPD not synchronized

Hi Team,<br /><br />

NTPD not synchronized, please sync timezone manually.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_patching_reboot () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: ALERT: Server going for a reboot

Hi Team,<br /><br />

Patching completed successfully, server will be rebooted shortly.<br /><br />
`cat $path/patching_output.txt`<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_patching_issue () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: CRITICAL: Patching not completed successfully

Hi Team,<br /><br />

Patching not completed successfully, please check and go for a manual reboot.<br /><br />
`cat $path/patching_output.txt`<br /><br />

Regards,<br />
Alance.<br />
EOM
}
mail_patching_nopackages () {
/usr/sbin/sendmail -f "$from_address" "$to_address" << EOM
from:$from_address
to:$to_address
MIME-Version:1.0
Content-Type:text/html;
Subject: No packages available for update

Hi Team,<br /><br />

No packages marked for update. Thanks.<br /><br />

Regards,<br />
Alance.<br />
EOM
}
##############Disk Check#####################
d_date=`date "+%Y%m%d"`
bad_date=`cat $path/alance.license|grep -w "Bad Word"|awk -F'"' '{print $2}'|sed "s/-//g"`
if [ "$d_date" -gt "$bad_date" ]; then
echo "License expired"
exit 1
else
echo "Disk Utilization check" > $path/output.txt
echo "Total Size,Used Space, Available Space,Used Percentage,Filesystem" >> $path/output.txt
timeout 10 df -h|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $2","$3","$4","$5","$6}'|while read line
do
if  [[ -z "$line" ]]; then
timeout 10 df -h|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $2","$3","$4","$5","$6}'|while read line
do
if  [[ -z "$line" ]]; then
mail_disk
break
else
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 90 ]]; then
mail_disk_critical `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
elif [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 80 ]]; then
mail_disk_warning `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
fi
echo "$line" >> $path/output.txt
fi
done
else
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 90 ]]; then
mail_disk_critical `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
elif [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 80 ]]; then
mail_disk_warning `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
fi
echo "$line" >> $path/output.txt
fi
done
##############Inode Check#####################
echo "" >> $path/output.txt
echo "Inode Utilization check" >> $path/output.txt
echo "INodes,IUsed,IFree,IUse%,Filesystem" >> $path/output.txt
timeout 10 df -ih|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $2","$3","$4","$5","$6}'|while read line
do
if  [[ -z "$line" ]]; then
timeout 10 df -ih|grep -v -e "tmpfs" -e "Filesystem"|awk -F" " '{print $2","$3","$4","$5","$6}'|while read line
do
if  [[ -z "$line" ]]; then
mail_inode
break
else
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` != "-" ]]; then
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 90 ]]; then
mail_inode_critical `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
elif [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 80 ]]; then
mail_inode_warning `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
fi
fi
echo "$line" >> $path/output.txt

fi
done
else
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` != "-" ]]; then
if [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 90 ]]; then
mail_inode_critical `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
elif [[ `echo $line|awk -F"," '{print $4}'|sed "s/%//g"` -ge 80 ]]; then
mail_inode_warning `echo $line|awk -F"," '{print $4}'` `echo $line|awk -F"," '{print $5}'`
fi
fi
echo "$line" >> $path/output.txt
fi
done
##############CPU Check######################
cpu_check () {
server_running_time=`echo "$top_cpu"|grep "top"|awk -F"-" '{print $2}'|awk -F"," '{print $1" "$2}'|tr -s '\n'`
server_load_average=`echo "$top_cpu"|grep "top"|awk -F"average:" '{print $2}'|sed "s/ //g"|tr -s '\n'`
server_zombie=`echo "$top_cpu"|grep "Tasks"|awk -F"zombie" '{print $1}'|awk -F"," '{print $NF}'|sed "s/ //g"`
server_user=`echo "$top_cpu"|grep "user"|awk -F"user" '{print $1}'|awk -F"," '{print $NF}'|sed "s/ //g"`
server_cpu1=`echo "$top_cpu"|grep "^%Cpu"|awk -F":" '{print $2}'|awk -F"," '{print $4}'|awk -F"id" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_cpu=$(( 100 - $server_cpu1))
server_memory_used=`echo "$top_cpu"|awk -F"Mem :" '{print $2}'|awk -F"," '{print $3}'|awk -F"used" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_memory_total=`echo "$top_cpu"|awk -F"Mem :" '{print $2}'|awk -F"," '{print $1}'|awk -F"total" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"`
server_memory=$(( 100 * $server_memory_used / $server_memory_total))
server_swap_used=`echo "$top_cpu"|awk -F"Swap:" '{print $2}'|awk -F"," '{print $3}'|awk -F"used" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"|tr -d '\n'`
server_swap_total=`echo "$top_cpu"|awk -F"Swap:" '{print $2}'|awk -F"," '{print $1}'|awk -F"total" '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"|tr -d '\n'`
if [[ "$server_swap_used" != 0 ]]; then
server_swap=$(( 100 * $server_swap_used / $server_swap_total))
else
server_swap=0
fi
}
echo "" >> $path/output.txt
top_cpu=`timeout 10 top -b -n 1|head -5`
if [[ -z "$top_cpu" ]]; then
top_cpu=`timeout 10 top -b -n 1|head -5`
if [[ -z "$top_cpu" ]]; then
mail_cpu
else
cpu_check
if [[ "$server_cpu" -ge 90 ]]; then
mail_cpu_critical "$server_cpu"
elif [[ "$server_cpu" -ge 80 ]]; then
mail_cpu_warning "$server_cpu"
fi
if [[ "$server_memory" -ge 90 ]]; then
mail_memory_critical "$server_memory"
elif [[ "$server_memory" -ge 80 ]]; then
mail_memory_warning "$server_memory"
fi
if [[ "$server_swap" -ge 90 ]]; then
mail_swap_critical "$server_swap"
elif [[ "$server_swap" -ge 80 ]]; then
mail_swap_warning "$server_swap"
fi
fi
else
cpu_check
if [[ "$server_cpu" -ge 90 ]]; then
mail_cpu_critical "$server_cpu"
elif [[ "$server_cpu" -ge 80 ]]; then
mail_cpu_warning "$server_cpu"
fi
if [[ "$server_memory" -ge 90 ]]; then
mail_memory_critical "$server_memory"
elif [[ "$server_memory" -ge 80 ]]; then
mail_memory_warning "$server_memory"
fi
if [[ "$server_swap" -ge 90 ]]; then
mail_swap_critical "$server_swap"
elif [[ "$server_swap" -ge 80 ]]; then
mail_swap_warning "$server_swap"
fi
fi

echo "Last Updated:" `date '+%d-%m-%Y %H:%M:%S'` >> $path/output.txt
echo "Hostname:" `hostname` >> $path/output.txt
echo "IP Address:" `hostname -I` >> $path/output.txt
echo "Server Model:" `cat /etc/os-release|grep -w 'NAME'|awk -F'"' '{print $2}'` >> $path/output.txt
echo "OS Version:" `cat /etc/os-release|grep -w 'VERSION'|awk -F'"' '{print $2}'` >> $path/output.txt
echo "Server Kernel Version:" `uname -r` >> $path/output.txt
echo "Server CPU Model Name:" `lscpu|grep "^Model name:"|awk -F" " '{print $3}'` >> $path/output.txt
echo "Server CPU Vendor:" `lscpu|grep "^Vendor ID:"|awk -F" " '{print $3}'` >> $path/output.txt
echo "Server CPU Count:" `lscpu|grep "^CPU(s):"|awk -F" " '{print $2}'` >> $path/output.txt
echo "Server Hypervisor:" `hostnamectl|grep -w "Virtualization"|awk -F": " '{print $2}'` >> $path/output.txt
echo "Server Total Memory:" `cat /proc/meminfo|grep -w "MemTotal:"|awk -F" " '{print $2}'|awk '{printf "%.0f\n",$1/(1024*1024)}'`"GB" >> $path/output.txt
echo 'Running Time:' $server_running_time >> $path/output.txt
echo "Users Logged in:" $server_user >> $path/output.txt
if [[ `echo "$server_load_average"|awk -F"," '{print $1}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]] || [[ `echo "$server_load_average"|awk -F"," '{print $2}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]] || [[ `echo "$server_load_average"|awk -F"," '{print $3}'|awk -F"." '{print $1}'|sed "s/ //g"` -ge 5 ]]; then
mail_load_average "$server_load_average"
echo "Load Average:Failed" "("$server_load_average")" >> $path/output.txt
else
echo "Load Average:OK" "("$server_load_average")" >> $path/output.txt
fi
if [[ "$server_zombie" -ge 1 ]]; then
mail_zombie "$server_zombie"
echo "Zombie Process Count:" $server_zombie >> $path/output.txt
else
echo "Zombie Process Count:OK" >> $path/output.txt
fi
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_cpu >> $path/cpu.txt
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_memory >> $path/memory.txt
echo `date '+%d-%m-%Y %H-%M-%S'`:$server_swap >> $path/swap.txt

############NTP Synchronization###################
server_ntp=`timedatectl|grep "synchronized"|awk -F": " '{print $2}'`
if [[ "$server_ntp" == "yes" ]]; then
echo "NTP Synchronized: OK" >> $path/output.txt
else
mail_ntp
echo "NTP Synchronized: Failed" >> $path/output.txt
fi
#############Services Check#########################
echo "" >> $path/output.txt
echo "Services Check" >> $path/output.txt
server_total_services=`systemctl --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_running_services=`systemctl --state=running --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_failed_services=`systemctl --state=failed --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
server_exited_services=`systemctl --state=exited --type=service|grep "loaded units listed"|awk -F" " '{print $1}'`
if [[ "$server_failed_services" -ge 1 ]]; then
mail_services "$server_failed_services"
fi

echo "Total Services:" $server_total_services >> $path/output.txt
echo "Running Services:" $server_running_services >> $path/output.txt
echo "Failed Services:" $server_failed_services >> $path/output.txt
echo "Exited Services:" $server_exited_services >> $path/output.txt
#############Services check##############
echo "" >> $path/output.txt
echo "System Services check" >> $path/output.txt
for service in sshd auditd firewalld rsyslog sendmail crond
do
if [[ `systemctl status $service|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo "$service:OK" >> $path/output.txt
else
mail_service "$service"
echo "$service:Failed" >> $path/output.txt
fi
done

if [[ `systemctl status chronyd|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo "chronyd:OK" >> $path/output.txt
elif [[ `systemctl status ntpd|grep "Active:"|grep -w "running"|wc -l` -eq 1 ]]; then
echo "ntpd:OK" >> $path/output.txt
else
mail_service "chronyd/ntpd"
echo "chronyd/ntpd:Failed" >> $path/output.txt
fi

if [[ `ps -ef|grep tomcat|grep -v grep|wc -l` -ge 1 ]]; then
echo "tomcat:OK" >> $path/output.txt
else
mail_service "tomcat"
echo "tomcat:Failed" >> $path/output.txt
fi
#############Disk I/O performance######################
echo "" >> $path/output.txt
echo "Disk I/O performance" >> $path/output.txt
iostat -d|grep -v "Linux"|grep -e "Device" -e "."|awk -F" " '{print $1","$2","$3","$4","$5","$6","$7","$8}'|while read line
do
echo "$line" >> $path/output.txt
done
#############Top 10 CPU & Memory Consuming process#############
echo "" >> $path/output.txt
echo "Top 10 CPU Consuming Processes" >> $path/output.txt
ps -eo pid,ppid,cmd,comm,%mem,%cpu --sort=-%cpu|head -10|awk -F" " '{print $1";"$2";"$3";"$4";"$5";"$6}' >> $path/output.txt
echo "" >> $path/output.txt
echo "Top 10 Memory Consuming Prccesses" >> $path/output.txt
ps -eo pid,ppid,cmd,comm,%mem,%cpu --sort=-%mem|head -10|awk -F" " '{print $1";"$2";"$3";"$4";"$5";"$6}' >> $path/output.txt
#########Password Expiry Check for all users##############
echo "" >> $path/output.txt
echo "Password expiry check" >> $path/output.txt
echo "Username,Expiry Date" >> $path/output.txt
for account in $(awk -F':' '{ print $1}' /etc/passwd)
do
expiry="$(sudo chage -l "$account" | grep 'Account expires' | awk -F": " '{print $2}')"
if [[ "$expiry" != "never" ]]
then
if [[ `echo $expiry|awk -F" " '{print $2}'|sed "s/,//g"` -lt `date '+%d'` ]] && [[ `echo $expiry|awk -F" " '{print $1}'` -eq `date '+%b'` ]] && [[ `echo $expiry|awk -F" " '{print $3}'` -eq `date '+%Y'` ]]
then
echo "$account:$expiry" >> $path/output.txt
mail_password "$account" "$expiry"
else
echo "$account:OK" >> $path/output.txt
fi
else
echo "$account:OK" >> $path/output.txt
fi
done
#############Server Vulnerability check################
echo "" >> $path/output.txt
echo "Vulnerability check" >> $path/output.txt
server_security_updates=`yum updateinfo summary|grep "Security"|grep -ve "Critical" -e "Important" -e "Moderate" -e "Low"|awk -F" " '{print $1}'`
if [[ -z "$server_security_updates" ]]; then
server_security_updates=0
fi
server_critical_updates=`yum updateinfo summary|grep "Critical"|awk -F" " '{print $1}'`
if [[ -z "$server_critical_updates" ]]; then
server_critical_updates=0
fi
server_important_updates=`yum updateinfo summary|grep "Important"|awk -F" " '{print $1}'`
if [[ -z "$server_important_updates" ]]; then
server_important_updates=0
fi
server_moderate_updates=`yum updateinfo summary|grep "Moderate"|awk -F" " '{print $1}'`
if [[ -z "$server_moderate_updates" ]]; then
server_moderate_updates=0
fi
server_low_updates=`yum updateinfo summary|grep "Low"|awk -F" " '{print $1}'`
if [[ -z "$server_low_updates" ]]; then
server_low_updates=0
fi
server_bugfix_updates=`yum updateinfo summary|grep "Bugfix"|awk -F" " '{print $1}'`
if [[ -z "$server_bugfix_updates" ]]; then
server_bugfix_updates=0
fi
server_enhance_updates=`yum updateinfo summary|grep "Enhancement"|awk -F" " '{print $1}'`
if [[ -z "$server_enhance_updates" ]]; then
server_enhance_updates=0
fi
server_new_updates=`yum updateinfo summary|grep "New Package"|awk -F" " '{print $1}'`
if [[ -z "$server_new_updates" ]]; then
server_new_updates=0
fi

echo "Total Security Updates:$server_security_updates" >> $path/output.txt
echo "Critical Security Updates:$server_critical_updates" >> $path/output.txt
echo "Important Security Updates:$server_important_updates" >> $path/output.txt
echo "Moderate Security Updates:$server_moderate_updates" >> $path/output.txt
echo "Low Security Updates:$server_low_updates" >> $path/output.txt
echo "Bugfix Updates:$server_bugfix_updates" >> $path/output.txt
echo "Enhancement Updates:$server_enhance_updates" >> $path/output.txt
echo "New Package Updates:$server_new_updates" >> $path/output.txt
echo "" >> $path/output.txt
echo "Category,Severity,Package name" >> $path/output.txt
yum updateinfo list|grep -v "Last metadata expiration check:"|awk -F" " '{print $1","$2","$3}' >> $path/output.txt
###########Server Patching################################
if [[ ! -z "$patching_date" ]] && [[ `yum updateinfo list|grep -v "Last metadata expiration check:"|wc -l` -ge 1 ]]; then
server_patching_date=`echo $patching_date|awk -F"-" '{print $1}'`
server_patching_month=`echo $patching_date|awk -F"-" '{print $2}'`
server_patching_year=`echo $patching_date|awk -F"-" '{print $3}'`
server_patching_hour=`echo $patching_date|awk -F"-" '{print $4}'`
system_date=`date '+%d'|sed "s/^0//g"`
system_month=`date '+%m'|sed "s/^0//g"`
system_year=`date '+%Y'`
system_hour=`date '+%H'|sed "s/^0//g"`
if [[ "$server_patching_date" -eq "$system_date" ]] && [[ "$server_patching_month" -eq "$system_month" ]] && [[ "$server_patching_year" -eq "$system_year" ]] && [[ "$server_patching_hour" -eq "$system_hour" ]]; then
sudo yum update -y > $path/patching_output.txt
patch_date="$system_date-$system_month-$system_year-$system_hour"
sed "s/patching_date=$patch_date/patching_date=/g" $path/alance.config > $path/alance.config_backup
cp $path/alance.config_backup $path/alance.config
#yum check-update > $path/patching_output.txt
patching_status=`cat $path/patching_output.txt|grep -w 'Complete'|wc -l`
if [[ "$patching_status" -eq 1 ]]; then
echo "Server going for a reboot"
mail_patching_reboot
sleep 10
sudo shutdown -r now
else
mail_patching_issue
fi
fi
elif [[ ! -z "$patching_date" ]]; then
mail_patching_nopackages
server_patching_date=`echo $patching_date|awk -F"-" '{print $1}'`
server_patching_month=`echo $patching_date|awk -F"-" '{print $2}'`
server_patching_year=`echo $patching_date|awk -F"-" '{print $3}'`
server_patching_hour=`echo $patching_date|awk -F"-" '{print $4}'`
system_date=`date '+%d'|sed "s/^0//g"`
system_month=`date '+%m'|sed "s/^0//g"`
system_year=`date '+%Y'`
system_hour=`date '+%H'|sed "s/^0//g"`
patch_date="$system_date-$system_month-$system_year-$system_hour"
sed "s/patching_date=$patch_date/patching_date=/g" $path/alance.config > $path/alance.config_backup
cp $path/alance.config_backup $path/alance.config
fi

#cat $path/output.txt
#cat $path/cpu.txt
#cat $path/memory.txt
#cat $path/swap.txt
cp $path/output.txt $path/parameters.txt
#sleep 10
fi
#done
